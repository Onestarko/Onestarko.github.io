{"meta":{"title":"onestarko","subtitle":"","description":"","author":"kowhoy","url":"http://yoursite.com","root":"/"},"pages":[{"title":"categories","date":"2020-02-15T00:58:48.000Z","updated":"2020-02-15T00:59:32.763Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-02-15T00:59:39.000Z","updated":"2020-02-15T01:57:12.301Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"配置数据管理查询","slug":"配置数据管理查询","date":"2020-04-10T10:05:02.000Z","updated":"2020-04-10T10:16:55.898Z","comments":true,"path":"2020/04/10/配置数据管理查询/","link":"","permalink":"http://yoursite.com/2020/04/10/%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E6%9F%A5%E8%AF%A2/","excerpt":"","text":"配置数据管理查询 背景: 数据库以及服务器的配置信息比较多，临时使用频率也高,找起来不方便 pylsy configparser catconfig.py12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576import sysfrom pylsy import pylsytableimport configparsercp &#x3D; configparser.ConfigParser()cp.read(&quot;&#x2F;Users&#x2F;zhouke&#x2F;code&#x2F;catconfig&#x2F;catconfig.cfg&quot;)cp_sections &#x3D; cp.sections()config_dict &#x3D; &#123;&#125;for section in cp_sections: name &#x3D; section.split(&quot;:&quot;)[0] if name not in config_dict: config_dict[name] &#x3D; [] config_data &#x3D; cp._sections[section] config_dict[name].append(config_data)match_dict &#x3D; &#123; &quot;db_51&quot;:[&quot;51&quot;, &quot;生产&quot;], &quot;db_69&quot;:[&quot;db_69&quot;], &quot;db_oms&quot;:[&quot;oms&quot;], &quot;db_oil&quot;:[&quot;oil&quot;], &quot;db_oil_test&quot;:[&quot;oil_test&quot;], &quot;db_ygh&quot;:[&quot;ygh&quot;, &quot;petrol&quot;], &quot;db_cd&quot;:[&quot;db_cd&quot;, &quot;db_禅道&quot;, &quot;cd&quot;, &quot;禅道&quot;], &quot;db_yzg&quot;:[&quot;yzg&quot;], &quot;db_yzg_test&quot;:[&quot;yzg_test&quot;], &quot;mail_data&quot;:[&quot;mail&quot;], &quot;web_datav&quot;:[&quot;datav&quot;], &quot;web_ali&quot;:[&quot;zy_ali&quot;], &quot;tm&quot;:[&quot;teamview&quot;, &quot;teamviewer&quot;, &quot;tm&quot;], &quot;s_69&quot;:[&quot;s_69&quot;, &quot;69&quot;], &quot;s_jump&quot;:[&quot;jump&quot;, &quot;jumper&quot;, &quot;2222&quot;], &quot;s_cd&quot;:[&quot;s_cd&quot;, &quot;s_禅道&quot;], &quot;s_54&quot;:[&quot;54&quot;, &quot;s_54&quot;], &quot;s_56&quot;:[&quot;56&quot;, &quot;s_56&quot;, &quot;win&quot;, &quot;windows&quot;], &quot;s_ali&quot;:[&quot;ali&quot;], &quot;s_bcc&quot;:[&quot;bcc&quot;, &quot;baidu&quot;, &quot;s_bcc&quot;], &quot;db_bcc&quot;:[&quot;db_bcc&quot;], &quot;wx&quot;:[&quot;wx&quot;, &quot;wx_mail&quot;], &quot;bk&quot;:[&quot;bucket&quot;, &quot;bos&quot;], &quot;tab&quot;:[&quot;tableau&quot;, &quot;license&quot;, &quot;tab&quot;]&#125;find_dict &#x3D; &#123;&#125;for name, alias_list in match_dict.items(): for idx, alias in enumerate(alias_list): find_dict[alias] &#x3D; name find_dict[name.split(&quot;_&quot;)[0] + alias] &#x3D; namesearch_str &#x3D; sys.argv[1]if search_str not in find_dict: print(&quot;🈚️&quot;)else: config_res &#x3D; config_dict[find_dict[search_str]] table_dict &#x3D; &#123;&#125; for idx, row in enumerate(config_res): for k, v in row.items(): if k not in table_dict: table_dict[k] &#x3D; [] table_dict[k].append(v) table_head &#x3D; list(table_dict.keys()) table &#x3D; pylsytable(table_head) for k, v in table_dict.items(): table.add_data(k, v) print(table) catconfig.cfg 123456789[db_a:1]host &#x3D; 111user &#x3D; 111passwd &#x3D; 111[db_a:2]host &#x3D; 111user &#x3D; 222passwd &#x3D; 222 catconfig.sh 12#!&#x2F;bin&#x2F;bashpython &#x2F;Users&#x2F;zhouke&#x2F;code&#x2F;catconfig&#x2F;catconfig.py $1 添加全局命令 1sudo ln -s &#x2F;Users&#x2F;zhouke&#x2F;code&#x2F;catconfig&#x2F;catconfig.sh &#x2F;usr&#x2F;local&#x2F;bin&#x2F;catconfig 使用 1catconfig a ## a: 配置的映射字段 效果","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"uwsgi+nginx部署flask","slug":"uwsgi-nginx部署flask","date":"2020-04-10T09:54:21.000Z","updated":"2020-04-10T10:14:43.268Z","comments":true,"path":"2020/04/10/uwsgi-nginx部署flask/","link":"","permalink":"http://yoursite.com/2020/04/10/uwsgi-nginx%E9%83%A8%E7%BD%B2flask/","excerpt":"","text":"uwsgi + nginx部署flask一、安装uwsgi 使用python版本对应的pip进行安装uwsgi 1pip install uwsgi 在项目下创建uwsgi.ini文件 12345678910111213[uwsgi]http &#x3D; 0.0.0.0:5000pythonpath &#x3D; &#x2F;home&#x2F;anaconda3&#x2F;bin&#x2F;pythonchdir &#x3D; &#x2F;home&#x2F;code&#x2F;apiwsgi-file &#x3D; app.pycallable &#x3D; appprocesses &#x3D; 4threads &#x3D; 2stats &#x3D; 127.0.0.1:9191pidfile &#x3D; uwsgi.piddeamonize &#x3D; .&#x2F;log&#x2F;uwsgi.loglazy-apps &#x3D; truetouch-chain-reload &#x3D; true 后台运行uwsgi 1uwsgi -d --ini uwsgi.ini 二、安装配置nginx 下载安装包 1wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.17.9.tar.gz 解压，不要放到/usr/local下，会安装到这个目录 1tar -zxvf nginx-1.17.9.tar.gz 查看环境是否满足 123456789101112131415cd nginx-1.17.9&#x2F;.&#x2F;configure##不出现error则满足##否则检查依赖库#依赖库安装sudo yum install gcc-c++sudo yum install pcresudo yum install pcre-develsudo yum install zlibsudo yum install zlib-develsudo yum install opensslsudo yum install openssl-devel 无错误进行编译 123makesudo make install 三、配置nginx 自定义配置文件 /usr/local/nginx/conf/conf.d/api.conf 12345678910111213141516171819202122232425262728upstream project&#123; server localhost:5000;&#125;server &#123; listen 8080; server_name IP&#x2F;localhost; access_log &#x2F;home&#x2F;api&#x2F;access.log; error_log &#x2F;home&#x2F;api&#x2F;error.log; location &#x2F; &#123; proxy_pass http:&#x2F;&#x2F;project; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504; proxy_max_temp_file_size 0; proxy_connect_timeout 90; proxy_send_timeout 90; proxy_read_timeout 90; proxy_buffer_size 4k; proxy_buffers 4 32k; proxy_busy_buffers_size 64k; proxy_temp_file_write_size 64k; &#125;&#125; 配置/usr/local/nginx/conf/nginx.conf 12##在http下面加上include &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;conf.d&#x2F;*.conf; 配置开机启动 1234567891011121314151617vim &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;nginx.service[Unit]Description&#x3D;nginxAfter&#x3D;network.target[Service]Type&#x3D;forkingExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginxExecReload&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx reloadExecStop&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx quitPrivateTmp&#x3D;true[Install]WantedBy&#x3D;multi-user.targetsystemctl enable nginx.service 启动nginx 1systemctl start nginx","categories":[{"name":"nginx","slug":"nginx","permalink":"http://yoursite.com/categories/nginx/"},{"name":"uwsgi","slug":"nginx/uwsgi","permalink":"http://yoursite.com/categories/nginx/uwsgi/"}],"tags":[{"name":"uwsgi","slug":"uwsgi","permalink":"http://yoursite.com/tags/uwsgi/"},{"name":"nginx","slug":"nginx","permalink":"http://yoursite.com/tags/nginx/"}]},{"title":"Elasticsearch基础使用","slug":"Elasticsearch基础使用","date":"2020-04-02T08:23:17.000Z","updated":"2020-04-02T10:22:04.764Z","comments":true,"path":"2020/04/02/Elasticsearch基础使用/","link":"","permalink":"http://yoursite.com/2020/04/02/Elasticsearch%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/","excerpt":"","text":"Elasticsearch基础使用一、安装 需要java环境 下载安装包 1wget https:&#x2F;&#x2F;mirrors.huaweicloud.com&#x2F;elasticsearch&#x2F;7.6.1&#x2F;elasticsearch-7.6.1-linux-x86_64.tar.gz 解压，配置环境变量 12345tar -zxvf elasticsearch-7.6.1-linux-x86_64.tar.gz#~&#x2F;.bash_profileexport ELASTICSEARCH_PATH&#x3D;&#x2F;home&#x2F;kowhoy&#x2F;software&#x2F;elasticsearch-7.6.1export PATH&#x3D;$&#123;ELASTICSEARCH_PATH&#125;&#x2F;bin:$PATH 启动 1elasticsearch 检查 12#另启终端curl &#39;http:&#x2F;&#x2F;localhost:9200&#x2F;?pretty&#39; 二、基础概念 elasticsearch中的概念与关系型数据库的概念类比: 关系型数据库 elasticsearch databases indices tables types rows documents cloumns fields 三、基础使用 本篇使用的是insomnia工具目的是创建一个类似以下关系型数据库结构的Elasticsearch 类型 名称 database-name history-demo table-name shell column-1-name command column-2-name create-by 创建index 12345678910111213141516171819202122232425262728@method: PUT@url: http://localhost:9200/history_demo@return: &#123; \"acknowledged\": true, \"shards_acknowledged\": true, \"index\": \"history_demo\"&#125;or##写入数据的同时也创建index@method: PUT@url: http://localhost:9200/history_demo/shell/1@data: &#123;\"command\":\"df -h\"&#125;@return: &#123; \"_index\": \"history_demo\", \"_type\": \"shell\", \"_id\": \"1\", \"_version\": 1, \"result\": \"created\", \"_shards\": &#123; \"total\": 2, \"successful\": 1, \"failed\": 0 &#125;, \"_seq_no\": 0, \"_primary_term\": 1&#125; 查看indices 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748##查看指定的index@method: GET@url: http://localhost:9200/history_demo@return: &#123; \"history_demo\": &#123; \"aliases\": &#123;&#125;, \"mappings\": &#123; \"shell\": &#123; \"properties\": &#123; \"command\": &#123; \"type\": \"text\", \"fields\": &#123; \"keyword\": &#123; \"type\": \"keyword\", \"ignore_above\": 256 &#125; &#125; &#125; &#125; &#125; &#125;, \"settings\": &#123; \"index\": &#123; \"creation_date\": \"1585796252661\", \"number_of_shards\": \"5\", \"number_of_replicas\": \"1\", \"uuid\": \"FrQU3tV4Smu5XioGH6qUjw\", \"version\": &#123; \"created\": \"6060199\" &#125;, \"provided_name\": \"history_demo\" &#125; &#125; &#125;&#125;## 查看所有的indices@method: GET@url: http://localhost:9200/_cat/indices@remark: 使用`_cat/indices`@return:yellow open oss JYYZYHlxQsCYpUfJGjNnfw 5 1 0 0 1.2kb 1.2kbyellow open doc 0JUEuXarQ0aBaB1YHD2KcA 5 1 1 0 4.7kb 4.7kbyellow open history_demo FrQU3tV4Smu5XioGH6qUjw 5 1 1 0 4.4kb 4.4kbyellow open posts c18QVZ00Snyp1OOomxjJuA 5 1 1 0 5.5kb 5.5kbgreen open .kibana_1 jLWNf4ysRDSUvR3qfmv5Ow 1 0 2 0 9.3kb 9.3kbyellow open blog x_vNxVVHT6qgQY3_RKiaHg 5 1 6 0 28.3kb 28.3kbyellow open person 1ctpvuoqTV-vTO4q9G9cnQ 5 1 2 0 8.1kb 8.1kb 插入documents 123456789101112131415161718192021222324252627282930313233343536373839## 插入单条数据@method: PUT/POST@url: http://localhost:9200/history_demo/shell/3@data: &#123;\"command\":\"df -h\"&#125;@return: &#123; \"_index\": \"history_demo\", \"_type\": \"shell\", \"_id\": \"3\", \"_version\": 1, \"result\": \"created\", \"_shards\": &#123; \"total\": 2, \"successful\": 1, \"failed\": 0 &#125;, \"_seq_no\": 0, \"_primary_term\": 1&#125;## 插入指定ID的多条数据@method: PUT/POST@url: http://localhost:9200/history_demo/shell/_bulk@data: &#123;\"index\":&#123;\"_id\":6&#125;&#125;&#123;\"command\":\"mysql\"&#125;&#123;\"index\":&#123;\"_id\":7&#125;&#125;&#123;\"command\":\"logatsh\"&#125;#!!注意 这个json_data末尾要多留一行@return: ...## 插入不指定ID的多条数据@method: PUT/POST@url: http://localhost:9200/history_demo/shell/_bulk@data:&#123;\"index\":&#123;&#125;&#125;&#123;\"command\":\"mysql\"&#125;&#123;\"index\":&#123;&#125;&#125;&#123;\"command\":\"logatsh\"&#125; 查询 1234567891011## 查询所有的documents@method: GET@url: http://localhost:9200/history_demo/shell/_search@data: &#123;\"query\":&#123;\"match_all\":&#123;&#125;&#125;&#125;@return: ...## 按条件查询@method: GET@url: http://localhost:9200/history_demo/shell/_search@data: &#123;\"query\":&#123;\"match\":&#123;\"command\":\"mysql\"&#125;&#125;&#125;@return: ... 删除 12345678910## 指定ID进行delete@method: DELETE@url: http://localhost:9200/history_demo/shell/1@return: ...## 根据条件删除@method:POST@url: http://localhost:9200/history_demo/shell/_delete_by_query@data: &#123;\"query\":&#123;\"match\":&#123;\"command\":\"mysql\"&#125;&#125;&#125;@return: ... 修改 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051## 指定ID进行修改@method:POST@url: http://localhost:9200/history_demo/shell/2/_update@data: &#123; \"script\": &#123; \"source\":\"ctx._source.command=params.command\", \"lang\": \"painless\", \"params\": &#123; \"command\":\"history\" &#125; &#125;&#125;@return: ...@remark: ctx指当前事务, _source指当前的document, lang指使用painless脚本语言来编写script## 仅增加字段进行修改@method: POST@url: http://localhost:9200/history_demo/shell/2/_update@data: &#123; \"script\": &#123; \"source\": \"ctx._source.bash_time='2020-02-02'\" &#125;&#125;@return: ...## 仅删除字段进行修改@method: POST@url: http://localhost:9200/history_demo/shell/2/_update@data: &#123; \"script\": &#123; \"source\": \"ctx._source.remove('bash_time')\" &#125;&#125;@return: ...## 根据条件进行修改@method: POST@url: http://localhost:9200/history_demo/shell/_update_by_query@data: &#123; \"query\": &#123; \"match\":&#123;\"command\":\"df -h\"&#125; &#125;, \"script\": &#123; \"source\": \"ctx._source.command=params.command\", \"lang\": \"painless\", \"params\": &#123; \"command\": \"tail data.log\" &#125; &#125;&#125;@return: ..","categories":[{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"http://yoursite.com/categories/Elasticsearch/"}],"tags":[{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"http://yoursite.com/tags/Elasticsearch/"}]},{"title":"flask思路整理","slug":"flask思路整理","date":"2020-03-27T10:13:06.000Z","updated":"2020-03-27T10:35:34.834Z","comments":true,"path":"2020/03/27/flask思路整理/","link":"","permalink":"http://yoursite.com/2020/03/27/flask%E6%80%9D%E8%B7%AF%E6%95%B4%E7%90%86/","excerpt":"","text":"flask思路整理一. 创建虚拟环境python3 -m venv venv. venv/bin/activate 二. init.py主要工作： 创建应用 添加配置 初始化应用 注册蓝图 创建应用: 123456import osfrom flask import Flaskdef create_app(test_config=None): ## instance_relative_config 使用True的话就会从instance文件夹作为配置文件的路径 app = Flask(__name__, instance_relative_config=True) 添加配置 12345678910111213##方式一:app.config.from_mapping( SECRET_KEY='dev' )##方式二:#silent 文件不存在是否静默报错app.config.from_pyfile('config.py', silent=True)#随机key的生成import osimport binasciibinascii.hexlify(os.urandom(16)) 初始化应用 123app.teardown_appcontext(db.close_db) ##在返回响应后进行清理调用的程序app.cli.add_command(db.init_db_command) ##添加命令行指令 注册蓝图 12from . import authapp.register_buleprint(auth.bp) 三、db.py 使用click创建命令 12345678import clickfrom flask.cli import with_appcontext@click.command('init-db')@with_appcontextdef init_db_command(): **** click.echo(\"输出内容\") 数据库连接使用g,不会每次请求都重新创建连接 1234567from flasj import current_app, gdef get_db(): if 'db' not in g: g.db = 创建连接 return g.db 关闭数据库 12345def close_db(e=None): db = g.pop('db', None) if db is not None: db.close() 四、具体逻辑 蓝图 123from flask import Blueprintbp &#x3D; Blueprint(&#39;auth&#39;, __name__, url_prefix&#x3D;&#39;&#x2F;auth&#39;) 密码相关 1from werkzeug.security import check_password_hash, generate_password_hash 保证请求之前知道当时的用户 12345678@bp.before app_requestdef load_logged_in_user(): user_id = session.get('user_id') if user_id is None: g.user = None else: g.user = get_db()..... 要求是在登录状态(使用装饰符) 123456789import functoolsdef login_required(view): @functools.wraps(view) def wrapped_view(**kwargs): if g.user is None: return redirect(url_for(\"auth.login\")) return view(**kwargs) return wrapped_view 五、项目可安装 setup.py 123456789101112from setuptools import find_packages, setupsetup( name='flaskr', version='1.0.0', packages=find_packages(), include_package_data=True, zip_safe=False, install_requires=[ 'flask', ],) MANIIFEST.in 1234include flaskr&#x2F;schema.sqlgraft flaskr&#x2F;staticgraft flaskr&#x2F;templatesglobal-exclude *.pyc 可以使用pip install -e .安装项目 六、部署产品 构建 123pip install wheelpython setup.py bdist_wheel 安装将生成的.whl文件发送到服务求 1pip install ***.whl 更改配置是在venv/var/***-instance/下 七、运行产品服务器12pip iinstall waitresswaitress-serve --call &#39;appname:create_app&#39; 启动应用 12345export FLASK_APP&#x3D;APP_NAMEexport FLASK_ENV&#x3D;developmentflask runflask init-db","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"flask","slug":"flask","permalink":"http://yoursite.com/tags/flask/"},{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"tmux——基本使用示例","slug":"tmux——基本使用示例","date":"2020-03-27T04:00:05.000Z","updated":"2020-03-27T04:09:32.564Z","comments":true,"path":"2020/03/27/tmux——基本使用示例/","link":"","permalink":"http://yoursite.com/2020/03/27/tmux%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/","excerpt":"","text":"tmux——基本使用示例 使用tmux后台运行bash_history_notify项目 一、安装tmux12345#mac:brew install tmux#centos:yum install tmux 二、配置tmux 使用了github上的配置，然后做了修改tmux的默认快捷键前缀为 ctrl + b, 现在改为ctrl+a，下文中使用Prefix代替ctrl+a⚠️ :使用快捷键是先摁下快捷键前缀，然后抬手，在进行具体的快捷按键 1234cdgit clone https:&#x2F;&#x2F;github.com&#x2F;gpakosz&#x2F;.tmux.gitln -s -f .tmux&#x2F;.tmux.confcp .tmux&#x2F;.tmux.conf.local . 修改快捷键前缀 vim .tmux/.tmux.conf.local去掉290行附近的注释符 1234unbind C-aunbind C-bset -g prefix C-abind C-a send-prefix 三、使用tmux开启任务 bcc_00创建kafka_server的sessionn1tmux new -s kafka_server 使用Prefix+%分屏，使用Prefix+方向键切换鼠标所在窗格 在窗格1中启动zookeeper 12cd app&#x2F;kafka_2.12-2.4.0&#x2F;.&#x2F;bin&#x2F;zookeeper-server-start.sh .&#x2F;config&#x2F;zookeeper.properties 在窗格2中启动kafka 12cd app&#x2F;kafka_2.12-2.4.0&#x2F;.&#x2F;bin&#x2F;kafka-server-start.sh .&#x2F;config&#x2F;server.properties ) 使用Prefix+c 创建新窗口,并创建3个窗格,启动bash_history的消费端、生产端、实验窗口 在窗格1中启动消费端 12cd ~&#x2F;code&#x2F;python&#x2F;bash_history&#x2F;python bash_history_consumer.py 在窗格2中启动生产端 12cd ~&#x2F;code&#x2F;python&#x2F;bash_history&#x2F;python bash_history_producer.py ~&#x2F;.bash_history 在窗格3中随便输入命令，检查另外两个窗格是否有输出 bcc_01上开启生产端同上步骤，bcc_01上没有消费端 使用Prefix + d 退出session 使用tmux ls 查看session， 使用tmux at -t &lt;session_name&gt;连接session","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[]},{"title":"kafak示例-远程监控终端输入","slug":"kafak示例-远程监控终端输入","date":"2020-03-26T03:52:54.000Z","updated":"2020-03-26T03:52:54.112Z","comments":true,"path":"2020/03/26/kafak示例-远程监控终端输入/","link":"","permalink":"http://yoursite.com/2020/03/26/kafak%E7%A4%BA%E4%BE%8B-%E8%BF%9C%E7%A8%8B%E7%9B%91%E6%8E%A7%E7%BB%88%E7%AB%AF%E8%BE%93%E5%85%A5/","excerpt":"","text":"kafak示例-远程监控终端输入 使用pyinotify监听.bash_history文件，使用kafka生产消费 一、kafka安装配置 安装java环境 官网下载kafka安装包 1wget http:&#x2F;&#x2F;archive.apache.org&#x2F;dist&#x2F;kafka&#x2F;1.0.0&#x2F;kafka_2.12-1.0.0.tgz 解压压缩包 配置/config/server.properties 1advertised.listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;&#123;&#123;IP&#125;&#125;:9092 启动kafka 12345##zookeeper启动.&#x2F;bin&#x2F;zookeeper-server-start.sh .&#x2F;config&#x2F;zookeeper.properties ##server启动.&#x2F;bin&#x2F;kafka-server-start.sh .&#x2F;config&#x2F;server.properties 创建topic 1.&#x2F;bin&#x2F;kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic &#123;&#123;topic_name&#125;&#125; 二、安装python依赖12345#kafka-pythonpip install kafka-python#pyinotifypip install pyinotify 三、服务器端代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495# -*- coding: utf-8 -*-# @Description: 监听文件变更向kafka发送# @Author: kowhoy# @Last Modified by: kowhoy# @filename: bash_history_producer.pyimport pyinotifyimport timeimport osimport sysimport jsonfrom kafka import KafkaProducerimport datetimeimport socketbootstrap_servers = \"ip:9092\"topic = \"bash_history\"host_name = \"bcc_00\"host_ip = socket.gethostbyname(socket.getfqdn(socket.gethostname()))'''@name: [class]Monitor_file@date: 2020-03-26 09:41:13@desc: 监听文件@param: [str]filename @return: '''class Monitor_file: def notify_bash_history(self, filename): wm = pyinotify.WatchManager() notifier = pyinotify.Notifier(wm) wm.watch_transient_file(filename, pyinotify.IN_MODIFY, Process_transient_file) notifier.loop()'''@name: [class]Process_transient_file@date: 2020-03-26 09:44:29@desc: 文件发生变化触发@param: @return: '''class Process_transient_file(pyinotify.ProcessEvent): def process_IN_MODIFY(self, event): line = file.readlines() if line: if len(line) == 2: order_time = int(line[0][1:-1]) order_time_array = time.localtime(order_time) order_time_str = time.strftime(\"%Y-%m-%d %H:%M:%S\", order_time_array) order = line[1][:-1] msg = &#123; \"host_name\": host_name, \"host_ip\": host_ip, \"order_time\": order_time_str, \"order\": order &#125; Send_to_kafka().send_msg(msg)'''@name: [class]Send_to_kafka@date: 2020-03-26 09:47:50@desc: 向kafka发送msg@param:@return: '''class Send_to_kafka(): def __init__(self): self.producer = KafkaProducer(bootstrap_servers=bootstrap_servers) def send_msg(self, msg): msg = json.dumps(msg, ensure_ascii=False).encode(\"utf-8\") self.producer.send(topic, msg) print(\"-\"*10, \"数据已发送\", \"-\"*10) print(msg) self.producer.flush()if __name__ == \"__main__\": filename = sys.argv[1] if not os.path.exists(filename): raise FileExistsError file_stat = os.stat(filename) file_size = file_stat[6] file = open(filename, \"r\") file.seek(file_size) Monitor_file().notify_bash_history(filename) 四、客户端代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697# -*- coding: utf-8 -*-# @Description: # @Author: kowhoy# @Date: 2020-03-26 10:15:24# @Last Modified time: 2020-03-26 11:25:15from kafka import KafkaConsumerfrom kafka.structs import TopicPartitionimport pandas as pdfrom sqlalchemy import create_engineimport jsonimport sysimport osdbh_config = &#123; \"host\": \"localhost\", \"user\": \"root\", \"passwd\": \"passwd\", \"database\": \"bash_history\", \"table\": \"bash_history_log\"&#125;save_to_tb = True ## 是否存数据库topic = \"bash_history\"bootstrap_servers = [\"ip:9092\"]single_file_size = 1 #Mclass Bash_history_consumer: def __init__(self): self.topic = \"bash_history\" self.consumer = KafkaConsumer(bootstrap_servers=bootstrap_servers) self.log_file_path = \"./bash_history_log/\" log_files = os.listdir(self.log_file_path) max_log_count = max([int(filename.split(\"_\")[-1]) for filename in log_files]) if len(log_files) &gt; 0 else -1 self.count = max_log_count + 1 self.save_list = [] if save_to_tb: e = \"mysql+pymysql://%s:%s@%s/%s\"%(dbh_config[\"user\"], dbh_config[\"passwd\"], dbh_config[\"host\"], dbh_config[\"database\"]) self.dbh = create_engine(e) empty_sql = 'select * from information_schema.TABLES where TABLE_SCHEMA = \"&#123;db&#125;\" and TABLE_NAME = \"&#123;tb&#125;\"'.\\ format(db=dbh_config[\"database\"], tb=dbh_config[\"table\"]) empty_df = pd.read_sql_query(empty_sql, self.dbh) self.tb_empty = empty_df.empty def bash_consumer(self): self.consumer.assign([TopicPartition(topic=topic, partition=0)]) for msg in self.consumer: msg_offset = msg.offset msg_value = (msg.value).decode(\"utf-8\") msg_value = json.loads(msg_value) self.save_list.append(msg_value) save_data_size = sys.getsizeof(self.save_list) if save_data_size &gt;= single_file_size * 1024 * 1024: save_file = self.log_file_path + \"bash_history_log_\" + str(self.count) self.count += 1 with open(save_file, \"w+\") as f: for line in self.save_list: f.write(line.decode(\"utf-8\")+\"\\n\") self.save_list = [] print(\"*\"*10, \"写入文件\", \"*\"*10) if save_to_tb: if self.tb_empty: add_way = \"replace\" self.tb_empty = False else: add_way = \"append\" for k, v in msg_value.items(): msg_value[k] = [v] insert_df = pd.DataFrame.from_dict(msg_value) insert_df.to_sql(dbh_config[\"table\"], self.dbh, if_exists=add_way, index=False) print(\"当前size\", save_data_size, \"\\t\", msg_value)if __name__ == \"__main__\": Bash_history_consumer().bash_consumer() 五、开启任务 我是使用bcc_00作为唯一的消费者，bcc_00和bcc_01作为两个生产者，修改好代码中的配置数据 bcc_00开启消费者 1python bash_history_consumer.py bcc_00 和 bcc_01分别开启生产者 1python bash_history_producer.py ~&#x2F;.bash_history 新起窗口进行命令行操作，就可以在控制台和数据库看到相关bash 00_consumer: 00_producer: 01_producer: sql_table(两台bcc内网ip一样):","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"kafka","slug":"kafka","permalink":"http://yoursite.com/tags/kafka/"},{"name":"pyinotify","slug":"pyinotify","permalink":"http://yoursite.com/tags/pyinotify/"}]},{"title":"mac下chromedriver升级","slug":"mac下chromedriver升级","date":"2020-03-13T02:50:14.000Z","updated":"2020-03-13T02:50:14.554Z","comments":true,"path":"2020/03/13/mac下chromedriver升级/","link":"","permalink":"http://yoursite.com/2020/03/13/mac%E4%B8%8Bchromedriver%E5%8D%87%E7%BA%A7/","excerpt":"","text":"下载与本地chrome版本一致的chromedriver,下载地址[http://chromedriver.storage.googleapis.com/index.html] 解压到本地的 /usr/local/bin 检查版本 chromedirver -v","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"scala伴生类和伴生对象","slug":"scala伴生类和伴生对象","date":"2020-02-23T11:36:55.000Z","updated":"2020-02-23T11:36:55.191Z","comments":true,"path":"2020/02/23/scala伴生类和伴生对象/","link":"","permalink":"http://yoursite.com/2020/02/23/scala%E4%BC%B4%E7%94%9F%E7%B1%BB%E5%92%8C%E4%BC%B4%E7%94%9F%E5%AF%B9%E8%B1%A1/","excerpt":"","text":"Scala伴生类和伴生对象 定义： 在Scala中，类名和对象名一致时，互为伴生类和伴生对象。 例子:123456789// 伴生类class ApplyTest &#123;&#125;// 伴生对象object ApplyTest &#123;&#125; 使用: 通常在伴生对象中写apply()方法，然后在apply方法中实例伴生类，然后每次使用类名称()的时候，就已经实例化了类 例子:12345678910111213141516object ApplyApp &#123; def main(args:Array[String]):Unit = &#123; val c = ApplyTest() println(c) &#125;&#125;class ApplyTest &#123;&#125;object ApplyTest &#123; def apply() = &#123; new ApplyTest() &#125;&#125;","categories":[{"name":"Scala","slug":"Scala","permalink":"http://yoursite.com/categories/Scala/"}],"tags":[{"name":"伴生","slug":"伴生","permalink":"http://yoursite.com/tags/%E4%BC%B4%E7%94%9F/"}]}]}